{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sohail\\\\Desktop\\\\HCL CREATION\\\\cricket-app\\\\src\\\\pages\\\\AddPlayerPage.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport PlayerForm from '../components/PlayerForm';\nimport PlayerTable from '../components/PlayerTable';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction AddPlayerPage() {\n  _s();\n  const [players, setPlayers] = useState([]);\n  const [formData, setFormData] = useState({\n    name: '',\n    season: '',\n    innings: 0,\n    notOuts: 0,\n    runs: 0,\n    ballsFaced: 0,\n    wickets: 0,\n    runsGiven: 0,\n    overs: 0\n  });\n  const handleChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    try {\n      const parsedData = {\n        ...formData,\n        innings: parseInt(formData.innings),\n        notOuts: parseInt(formData.notOuts),\n        runs: parseInt(formData.runs),\n        ballsFaced: parseInt(formData.ballsFaced),\n        wickets: parseInt(formData.wickets),\n        runsGiven: parseInt(formData.runsGiven),\n        overs: parseFloat(formData.overs) // <-- Ensure overs is a number\n      };\n      const response = await fetch('http://localhost:5000/players/add', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(parsedData)\n      });\n      if (response.ok) {\n        const {\n          player: newPlayer\n        } = await response.json(); // ✅ fixed Give me the value of the player property inside the JSON response, and store it in a new variable called newPlayer.”\n        setPlayers([...players, newPlayer]);\n\n        // Reset form\n        setFormData({\n          name: '',\n          season: '',\n          innings: 0,\n          notOuts: 0,\n          runs: 0,\n          ballsFaced: 0,\n          wickets: 0,\n          runsGiven: 0,\n          overs: 0\n        });\n      } else {\n        const errorText = await response.text(); // Show backend error message\n        console.error('Failed to add player:', errorText);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n\n  // ✅ Optional: Fetch players from backend on page load\n  useEffect(() => {\n    //✅ When the component is mounted, useEffect runs once because the dependency array is empty ([]).\n    const fetchPlayers = async () => {\n      try {\n        const response = await fetch('http://localhost:5000/players'); //✅ fetch('http://localhost:5000/players') sends a GET request to your backend.\n\n        if (response.ok) {\n          const data = await response.json();\n          setPlayers(data);\n        } else {\n          console.error('Failed to fetch players');\n        }\n      } catch (error) {\n        console.error('Error fetching players:', error);\n      }\n    };\n    fetchPlayers();\n  }, []); // Empty dependency array = runs only once on mount\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginBottom: '4rem'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Add Player\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PlayerForm, {\n      formData: formData,\n      handleChange: handleChange,\n      handleSubmit: handleSubmit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(PlayerTable, {\n      players: players\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 98,\n    columnNumber: 9\n  }, this);\n}\n_s(AddPlayerPage, \"W4nwaKjDq/XpMcwr2AfJiJxuQ7c=\");\n_c = AddPlayerPage;\nexport default AddPlayerPage;\nvar _c;\n$RefreshReg$(_c, \"AddPlayerPage\");","map":{"version":3,"names":["useState","useEffect","PlayerForm","PlayerTable","jsxDEV","_jsxDEV","AddPlayerPage","_s","players","setPlayers","formData","setFormData","name","season","innings","notOuts","runs","ballsFaced","wickets","runsGiven","overs","handleChange","e","value","target","prev","handleSubmit","preventDefault","parsedData","parseInt","parseFloat","response","fetch","method","headers","body","JSON","stringify","ok","player","newPlayer","json","errorText","text","console","error","fetchPlayers","data","style","marginBottom","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Sohail/Desktop/HCL CREATION/cricket-app/src/pages/AddPlayerPage.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport PlayerForm from '../components/PlayerForm';\nimport PlayerTable from '../components/PlayerTable';\n\nfunction AddPlayerPage() {\n    const [players, setPlayers] = useState([]);\n    const [formData, setFormData] = useState({\n        name: '',\n        season: '',\n        innings: 0,\n        notOuts: 0,\n        runs: 0,\n        ballsFaced: 0,\n        wickets: 0,\n        runsGiven: 0,\n        overs: 0\n    });\n\n    const handleChange = (e) => {\n        const { name, value } = e.target;\n        setFormData(prev => ({\n            ...prev,\n            [name]: value\n        }));\n    };\n\nconst handleSubmit = async (e) => {\n    e.preventDefault();\n    try {\n        const parsedData = {\n            ...formData,\n            innings: parseInt(formData.innings),\n            notOuts: parseInt(formData.notOuts),\n            runs: parseInt(formData.runs),\n            ballsFaced: parseInt(formData.ballsFaced),\n            wickets: parseInt(formData.wickets),\n            runsGiven: parseInt(formData.runsGiven),\n            overs: parseFloat(formData.overs)  // <-- Ensure overs is a number\n        };\n\n        const response = await fetch('http://localhost:5000/players/add', {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(parsedData)\n        });\n\n        if (response.ok) {\n            const { player: newPlayer } = await response.json(); // ✅ fixed Give me the value of the player property inside the JSON response, and store it in a new variable called newPlayer.”\n            setPlayers([...players, newPlayer]);\n\n            // Reset form\n            setFormData({\n                name: '',\n                season: '',\n                innings: 0,\n                notOuts: 0,\n                runs: 0,\n                ballsFaced: 0,\n                wickets: 0,\n                runsGiven: 0,\n                overs: 0\n            });\n        } else {\n            const errorText = await response.text(); // Show backend error message\n            console.error('Failed to add player:', errorText);\n        }\n    } catch (error) {\n        console.error('Error:', error);\n    }\n};\n\n\n\n  // ✅ Optional: Fetch players from backend on page load\n    useEffect(() => {  //✅ When the component is mounted, useEffect runs once because the dependency array is empty ([]).\n        const fetchPlayers = async () => {\n            try {\n                const response = await fetch('http://localhost:5000/players');  //✅ fetch('http://localhost:5000/players') sends a GET request to your backend.\n\n\n                if (response.ok) {\n                    const data = await response.json();\n                    setPlayers(data);\n                } else {\n                    console.error('Failed to fetch players');\n                }\n            } catch (error) {\n                console.error('Error fetching players:', error);\n            }\n        };\n\n        fetchPlayers();\n    }, []); // Empty dependency array = runs only once on mount\n\n    return (\n        <div style={{ marginBottom: '4rem' }}>\n            <h1>Add Player</h1>\n            <PlayerForm\n                formData={formData}\n                handleChange={handleChange}\n                handleSubmit={handleSubmit}\n            />\n        {/* this is a prop meaning that PlayerTable will use the players function by the name players */}\n            <PlayerTable players={players} />\n        </div>\n    );\n}\n\nexport default AddPlayerPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}